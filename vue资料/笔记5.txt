组件：
	官方：Vue实例（根组件）表示已个应用、一个应用有若干个组件拼装而成
	电脑：主板、CPU，显卡、内存。。。。。

使用组件：
	<组件名></组件名>	<v-组件名></..>			v- 不是必须 , 注意不要使用html标签
定义组件：
	1) 组件变量名 = Vue.extend({组件本身})	vue1.0 2.0
	2) 组件变量名 = {组件本身}				vue2.0			√
注册组件：
	选项:
	components:{					√
		组件名:组件变量名
	}

	全局Vue
		Vue.component('组件名',组件变量名)
定义+注册
	Vue.component('组件名',组件本身)
	
	components:{
          '组件名':组件本身
    }

组件的数据：
	data 是个函数，要有返回值
	data(){return {数据}}
template 模板
	1) 字符模块
	2) 文件模板
		1) 内部文件	tempalte:'#id名'	<script type="x-template" id="id名"
										<template id="">		√
		2) 外部文件
			单文件组件: style/script/template
new Vue({根组件})
this 指向 根组件

this == 组件

------------------------------------------------------------------------------
组件嵌套：
	tempalte
		div 根
			父组件内容
			<子组件>
	父
		components{
			子组件
		}
--------------------------------------------------------------------------------
组件通讯:
	使用时传递数据
	父到子:

	a)	父组件内容
			<子组件 :自定义子组件属性="父数据"></child>
			选项props 收录组件属性
			props:['自定义子组件属性1','属性2']		使用数据: {{自定义子组件属性}}


	b)	<子组件 ref="子名称"></child>
		子访问父数据:	this.$parent.父数据/父方法


	子到父:
	a)	父组件内容
			<子组件 @自定义子组件事件="父函数"></child>
			子：this.$emit('自定义子组件事件',子数据)  传
			父: 父函数(data){ data接受到的数据 }

	b)	<子组件 ref="子名称"></child>
		<子组件 ref="子名称2"></child>
		<子组件 ref="子名称3"></child>
		父访问子数据： this.$refs.子名称.子数据/子方法()

	平级到平级:
		原理：创建根实例(组件)	Event = new Vue()
		Event组件.$emit('事件',数据)
		Event组件.$on('事件',function(data){data=数据})
--------------------------------------------------------------------------------
动态组件：

	<component :is="comp"></component>

	comp数据:
		'组件名'
--------------------------------------------------------------------------------
内容分发: 使用组件时，传递内容到组件内部使用，分组发放
	组件tempalte内部：	slot 槽位	slot name="编号"

	使用组件:	<组件名>内容</..>
	使用组件:	<组件名> <标签 slot="编号">内容1</..> </..>

	slot有富余情况: 会显示<slot>默认内容</slot>
--------------------------------------------------------------------------------
动画:
	过渡动画	transition 组件
		属性:	
			name: 动画名
			enter-active-class: 样式名
			leave-active-class: 样式名
		事件：
			@before-enter=fn 入场前
			@enter=fn        入场     不会频繁触发 需要第三方库
			@after-enter=fn 入场后
			@before-leave=fn
			@leave=fn
			@after-leave=fn
				fn(el)		el == 动画元素
		样式：
			.动画名-enter   前						
			.动画名-enter-active  后		入场

			.动画名-leave 				离场
			.动画名-leave-active 					
	1) css3动画	过渡
		样式：
			.动画名-enter   前						√
			.动画名-enter-active  后		入场

			.动画名-leave 				离场
			.动画名-leave-active 					√
	2) css库  animation动画
		样式：
			.动画名-enter   前						
			.动画名-enter-active  后		入场	√

			.动画名-leave 				离场
			.动画名-leave-active 					√	

	3) animate.css
		enter-active-class: 样式名
		leave-active-class: 样式名

	4) js 库   velocity   目标：监听动画进度
		@before-enter		入场属性设置
		@enter 				入场
		@leave 				离场

------------------------------------------------------------------------------
多元素动画:
	组件: transition-group   运动的子元素要有key ,告诉vue谁要做动画
------------------------------------------------------------------------------

路由
单文件组件
webpack

模块方式搭建vue项目环境（手动)

脚手架

项目

一周
------------------------------------------------------------------------------

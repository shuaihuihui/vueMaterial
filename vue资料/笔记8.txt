项目:

	1. 环境搭建  (vue-cli)
		vue init webpack-simple xxx
		cd xxx
		npm install
		npm run dev
	2. 项目分析(组件安排)
		build
			...
		src
			|-assets
			|-component
				|-navbar.vue / footbar.vue
				|-home.vue / follow.vue /  column.vue / user.vue
				|-slider.vue / detail.vue / login.vue / reg.vue
				|-error.vue
			|-store
			|-filters
			app.vue
			main.js
		index.html
		package.json
		webpack.config.js
	3.	结构搭建(html+css)
		a) 手工搭建(切图)
		b) css框架搭建(bootstrap/elementUI/mintUI)
		c) 接手静态页面->改装
			html模板移植   -> xx.vue
	4.	路由搭建
		问题：
			资源图片，注意路径
			资源js, 注意模块化
			组件路由装载后，样式覆盖，scoped

	5.	数据交互	axios
		文件(.data/.json)
		路由接参：
			{{$route.params.xx}}/{{$route.query.xx}}
			组件：this.$route.params.xx
			组件：this.$route.query.xx
		过滤器: Object.keys(Obj) 返回 数组['obj里面key']
			Object.keys(filters).forEach/map....  Vue.filters('',xx)
	a)非状态管理
		共享的数据、状态，放到根组件（根实例) new Vue({data})
		如何访问和修改:
			其他子组件里面  this.$root.$data.数据名   =   值
	b)状态管理
		如何修改状态：
			this.$store.dispatch('showNav')
		路由监听:	watch

		keep-alive 组件  节流加载 ,不是每次都加载
		axios 拦截器 全局配置	Interceptors
			https://www.npmjs.com/package/axios
			请求发出之前，和数据回来之后进行拦截，便于统一配置
	c)全局组件loading
		加入状态管理
	d) 加入路由动画
		animate.css

	--------------------------------------------------
		前后端分离(解决：跨域问题)

	大后端:
		nodejs + express(router服务) + jade/ejs
		html+css+js(swiper)+ajax请求+表单请求

		前端页面和后端在同域 public/www

	大前端:
		vue-cli + vue-router + axios + vuex   请求:this.$http.get(url/接口名)
			路由：http://localhost:8003/user
		nodejs + express(router服务)
		负责: 后端 -> 库  , 编写接口 http://localhost:3000/user
			app/server.use(/user,routerName)	服务

			routerName.get('/',(req,res,next)=>{	服务处理业务
				req.body|req.query|  -> mysql|mongodb
				res.send({数据})  返回数据，无需渲染页面
			})
		同域：后端服务器，前端打包,路由共享
		问题：服务器共存问题

	前后端分离:	前后端服务器共存,各自开发
		问题：跨域  8080 -> 3000  访问
		解决：后端设置
			server.use('/接口名',router)
			router.get('/',(req,res,next)=>{
				//允许跨域
				res.setHeader('Access-Control-Allow-Origin':req.headers.origin) 需要每次都设置 , 接口名被允许了，单次允许
				req.query|req.body -> mysql|mongodb|http.request(代理)
				res.send({抓到的数据}) 返回前端
			})

			统一配置: 需要middlewave 中间件 cors

			app.use(cors({
			  "origin": ['http://localhost:8080',''], //允许哪些域名可以跨域的	['http:...:8003','域名2']
			  "methods": "GET,HEAD,PUT,PATCH,POST,DELETE",  //允许请求的姿势
			  "alloweHeaders":['Content-Type','Authorization',''], //允许请求头
			  "credentials":true  后台运行携带凭证
			}));

			server.use('/接口名',router)
			router.get('/',(req,res,next)=>{
				//自然可以跨域-》库->send()
			})

	服务器给前端浏览器跨域写cookie , 场景:用户唯一判断
		流程：vue-》用户个人中心的数据请求->nodejs响应，判断session存不存在↓
			没有告知前端{错误信息}->vue收到后路由跳转login,提交->后端响应，库对比,种cookie/seesion,返回{用户数据}->前端完成登录路由跳转user/刷新后请求 -> 后台对比sesson存在,返回{用户数据}->前端vue可以渲染user页面
		跨源凭据(证)： cookie,http认证、客户端 ssl证明
			ajax跨域请求默认，不提供的,需要设置:  

			前端:	withCredentials = true  携带凭据   , 前端带了，后端一定要配合
			后端:	Access-Control-Allow-Credentials:true  运行前端携带  , 前端可以不带
		携带凭证：
			原生：
				var xhr = new XMLHttpRequest();
				xhr.open('post',url,true);
				xhr.withCredentials = true  携带
				xhr.send('a=1&b=2')

			jquery:
				$.ajax({
					type:'get',
					url:xxxx,
					dataType:'json',
					xhrFields:{
						withCredentials:true
					}
					success:function(data){..}
				});
			axios:
				统一配置: axios.defaults.withCredentials=true 
				单次携带: axios.get(url,{withCredentials:true }).then().catch()
			vue-resource:
				统一配置: 
					Vue.http.interceptors.push(function(req,next){ //拦截器
						req.credentials=true
						next()
					});
				单次携带:
					this.$http.get(url,{
						params:{}
						credentials:true
						xxx:ooo
					}).then(succ,error)
	--------------------------------------------------
一周: